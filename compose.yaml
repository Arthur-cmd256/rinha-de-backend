# Comments are provided throughout this file to help you get started.
# If you need more help, visit the Docker Compose reference guide at
# https://docs.docker.com/go/compose-spec-reference/

# Here the instructions define your application as a service called "server".
# This service is built from the Dockerfile in the current directory.
# You can add other services your application may depend on here, such as a
# database or a cache. For examples, see the Awesome Compose repository:
# https://github.com/docker/awesome-compose
services:
  api1:
    image: eclipse-temurin:17-jdk-jammy
    # build:
    #   context: .
    command: sh -c "./mvnw spring-boot:run"
    deploy:
      resources:
        limits:
          cpus: "0.25"
          memory: "0.5GB"
    # ports:
    #   - 8080:8080
    networks:
      rinha-de-backend:
        ipv4_address: 10.0.0.3
    working_dir: /app
    volumes:
      - ./:/app
    # The commented out section below is an example of how to define a PostgreSQL
    # database that your application can use. `depends_on` tells Docker Compose to
    # start the database before your application. The `db-data` volume persists the
    # database data between container restarts. The `db-password` secret is used
    # to set the database password. You must create `db/password.txt` and add
    # a password of your choosing to it before running `docker-compose up`.
    depends_on:
      db:
        condition: service_healthy

  api2:
    image: eclipse-temurin:17-jdk-jammy
    # build:
    #   context: .
    command: sh -c "./mvnw spring-boot:run"
    deploy:
      resources:
        limits:
          cpus: "0.25"
          memory: "0.5GB"
    # ports:
    #   - 8081:8080
    networks:
      rinha-de-backend:
        ipv4_address: 10.0.0.4
    working_dir: /app
    volumes:
      - ./:/app
    # The commented out section below is an example of how to define a PostgreSQL
    # database that your application can use. `depends_on` tells Docker Compose to
    # start the database before your application. The `db-data` volume persists the
    # database data between container restarts. The `db-password` secret is used
    # to set the database password. You must create `db/password.txt` and add
    # a password of your choosing to it before running `docker-compose up`.
    depends_on:
      db:
        condition: service_healthy

  nginx: # Load Balancer
    image: nginx:latest
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
    depends_on:
      - api1
      - api2
    ports:
      - "9999:9999"
    networks:
      rinha-de-backend:
        ipv4_address: 10.0.0.5
    deploy:
      resources:
        limits:
          cpus: "0.25"
          memory: "0.5GB"

  db:
    image: postgres
    deploy:
      resources:
        limits:
          cpus: "0.75"
          memory: "1.5GB"
    restart: always
    user: postgres
    secrets:
      - db-password
    volumes:
      - db-data:/var/lib/postgresql/data
    environment:
      - POSTGRES_DB=springbootdb
      - POSTGRES_PASSWORD_FILE=/run/secrets/db-password
    expose:
      - 5432
    ports:
      - 5432:5432
    networks:
      rinha-de-backend:
        ipv4_address: 10.0.0.2
    healthcheck:
      test: ["CMD", "pg_isready"]
      interval: 10s
      timeout: 5s
      retries: 5
volumes:
  db-data:
secrets:
  db-password:
    file: /home/arthur/db/password.txt
networks:
  rinha-de-backend:
    driver: bridge
    ipam:
      config:
        - subnet: 10.0.0.0/28
          gateway: 10.0.0.1
